name: Deploy to Google Cloud Functions

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  FUNCTION_NAME: ocular-ocr-service
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install test dependencies if they exist
        if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

    - name: Lint with flake8
      run: |
        # Install flake8 if not in requirements
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        # Install pytest if not in requirements
        pip install pytest pytest-asyncio
        # Run tests if they exist
        if [ -d tests ]; then pytest tests/ -v; else echo "No tests found, skipping"; fi

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Deploy to Cloud Functions (Staging)
      run: |
        gcloud functions deploy ${FUNCTION_NAME}-staging \
          --source . \
          --entry-point ocular_ocr \
          --runtime python311 \
          --trigger-http \
          --allow-unauthenticated \
          --region ${{ env.REGION }} \
          --memory 2GB \
          --timeout 540s \
          --max-instances 10 \
          --set-env-vars ENVIRONMENT=staging,MISTRAL_API_KEY=${{ secrets.MISTRAL_API_KEY_STAGING }}

    - name: Test staging deployment
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Get function URL
        FUNCTION_URL=$(gcloud functions describe ${FUNCTION_NAME}-staging --region=${{ env.REGION }} --format="value(httpsTrigger.url)")
        
        # Test health endpoint
        echo "Testing staging deployment at: $FUNCTION_URL"
        curl -f "$FUNCTION_URL/health" || exit 1
        echo "‚úÖ Staging deployment successful!"

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [test, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Deploy to Cloud Functions (Production)
      run: |
        gcloud functions deploy ${{ env.FUNCTION_NAME }} \
          --source . \
          --entry-point ocular_ocr \
          --runtime python311 \
          --trigger-http \
          --allow-unauthenticated \
          --region ${{ env.REGION }} \
          --memory 2GB \
          --timeout 540s \
          --max-instances 20 \
          --set-env-vars ENVIRONMENT=production,MISTRAL_API_KEY=${{ secrets.MISTRAL_API_KEY_PRODUCTION }}

    - name: Test production deployment
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Get function URL
        FUNCTION_URL=$(gcloud functions describe ${{ env.FUNCTION_NAME }} --region=${{ env.REGION }} --format="value(httpsTrigger.url)")
        
        # Test health endpoint
        echo "Testing production deployment at: $FUNCTION_URL"
        curl -f "$FUNCTION_URL/health" || exit 1
        echo "‚úÖ Production deployment successful!"

    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          üöÄ Automated production deployment
          
          **Deployment Details:**
          - Function: ${{ env.FUNCTION_NAME }}
          - Region: ${{ env.REGION }}
          - Runtime: Python 3.11
          - Commit: ${{ github.sha }}
          
          **Changes in this release:**
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

  notify-failure:
    runs-on: ubuntu-latest
    name: Notify on Failure
    needs: [test, deploy-staging, deploy-production]
    if: failure()

    steps:
    - name: Notify failure
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the workflow logs for details."
        # Here you could add Slack, email, or other notification integrations